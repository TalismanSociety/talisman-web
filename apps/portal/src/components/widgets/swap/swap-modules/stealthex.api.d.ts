/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/v4/rates/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get exchange range */
        post: operations["getExchangeRange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4/rates/estimated-amount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get estimated exchange amount */
        post: operations["getEstimatedExchangeAmount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List currencies */
        get: operations["listCurrencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4/currencies/{symbol}/{network}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get currency */
        get: operations["getCurrency"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4/exchanges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List exchanges */
        get: operations["listExchanges"];
        put?: never;
        /** Create exchange */
        post: operations["createExchange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v4/exchanges/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get exchange */
        get: operations["getExchange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set transaction hash
         * @description
         *     This method can be used for the manual addition of the transaction hash to an exchange.
         *     This will allow your users to confirm sent transactions right in your interface.
         *
         */
        patch: operations["setTransactionHash"];
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** @example {
         *       "min_amount": 0.00033283,
         *       "max_amount": null
         *     } */
        Range: {
            min_amount: number;
            max_amount: number | null;
        };
        /** @example {
         *       "estimated_amount": 1.79565383
         *     } */
        Estimate: {
            estimated_amount: number;
            rate?: {
                id: string;
                valid_until: string;
            };
        };
        /** @example {
         *       "symbol": "btc",
         *       "network": "mainnet",
         *       "legacy_symbol": "btc",
         *       "name": "Bitcoin",
         *       "rates": [
         *         "fixed",
         *         "floating"
         *       ],
         *       "features": [
         *         "custom_fee"
         *       ],
         *       "icon_url": "https://images.stealthex.io/coins-color/6255bc60422d1c0017b74f3f-btc_c.svg",
         *       "precision": null,
         *       "extra_id": null,
         *       "address_regex": "^[13][a-km-zA-HJ-NP-Z1-9]{25,80}$|^(bc1)[0-9A-Za-z]{25,80}$",
         *       "extra_id_regex": null,
         *       "contract_address": null,
         *       "warnings": {
         *         "deposit": [],
         *         "withdrawal": []
         *       }
         *     } */
        Currency: {
            /** @description The ticker symbol of the currency. */
            symbol: string;
            /** @description The blockchain network on which the currency operates. */
            network: string;
            /** @description Legacy ticker symbol used in APIs prior to version 4. */
            legacy_symbol: string;
            /** @description The full name of the currency. */
            name: string;
            /** @description Available rate types for the currency. */
            rates: ("floating" | "fixed")[];
            /** @description Special features supported by the currency. */
            features: "custom_fee"[];
            /** @description URL of the icon image representing the currency. */
            icon_url: string;
            /** @description Number of decimal places supported; can be null if unspecified. */
            precision: number | null;
            /** @description Additional ID if the currency supports Memo/Destination Tag. */
            extra_id: string | null;
            /** @description Regular expression for validating addresses of this currency. */
            address_regex: string | null;
            /** @description Regular expression for validating extra IDs of this currency. */
            extra_id_regex: string | null;
            /** @description A unique identifier (location, address) for a smart contract deployed on a blockchain. */
            contract_address: string | null;
            /** @description An object containing any warnings related to deposit and withdrawal. */
            warnings: {
                deposit: string[];
                withdrawal: string[];
            };
            /** @description List of available route pairs for the currency. */
            available_routes?: {
                /** @description The ticker symbol of the paired currency. */
                symbol: string;
                /** @description The blockchain network on which the paired currency operates. */
                network: string;
                /** @description Available rate types for the exchange. */
                rates: ("floating" | "fixed")[];
                /** @description Special features supported for the exchange. */
                features: "custom_fee"[];
            }[];
        };
        /** @example {
         *       "id": "sINzzXASW",
         *       "status": "waiting",
         *       "rate": "floating",
         *       "deposit": {
         *         "symbol": "btc",
         *         "network": "mainnet",
         *         "amount": 0.1,
         *         "expected_amount": 0.1,
         *         "address": "bc1qwjudfcur52uy4jv0z0dlnfl8tfe2cyrgtfz8f5",
         *         "extra_id": null,
         *         "tx_hash": null,
         *         "address_explorer_url": "https://blockchair.com/bitcoin/address/bc1qwjudfcur52uy4jv0z0dlnfl8tfe2cyrgtfz8f5",
         *         "tx_explorer_url": null
         *       },
         *       "withdrawal": {
         *         "symbol": "eth",
         *         "network": "mainnet",
         *         "amount": 1.79467607,
         *         "expected_amount": 1.79467607,
         *         "address": "0xb794f5ea0ba39494ce839613fffba74279579268",
         *         "extra_id": null,
         *         "tx_hash": null,
         *         "address_explorer_url": "https://blockchair.com/ethereum/address/0xb794f5ea0ba39494ce839613fffba74279579268",
         *         "tx_explorer_url": null
         *       },
         *       "refund_address": null,
         *       "refund_extra_id": null,
         *       "created_at": "2024-06-25T13:13:29.501Z",
         *       "expires_at": null
         *     } */
        Exchange: {
            /** @description A unique identifier of the exchange. */
            id: string;
            /**
             * @description The current state of the exchange.
             * @enum {string}
             */
            status: "waiting" | "confirming" | "exchanging" | "sending" | "verifying" | "finished" | "failed" | "refunded" | "expired";
            /**
             * @description The exchange rate type.
             * @enum {string}
             */
            rate: "floating" | "fixed";
            /** @description Details about the exchange deposit. This includes information about the currency being sent by the user. */
            deposit: {
                /** @description The ticker symbol of the sending currency. */
                symbol: string;
                /** @description The blockchain network on which the sending currency operates. */
                network: string;
                /** @description The actual amount we received. */
                amount: number;
                /** @description The amount we expect to receive. */
                expected_amount: number;
                /** @description The blockchain address to which the funds should be sent. */
                address: string;
                /** @description Additional ID for the blockchain address if the sending currency supports Memo/Destination Tag. */
                extra_id: string | null;
                /** @description The transaction hash. */
                tx_hash: string | null;
                /** @description URL of the address in the blockchain explorer. */
                address_explorer_url: string | null;
                /** @description URL of the transaction in the blockchain explorer. */
                tx_explorer_url: string | null;
            };
            /** @description Details about the exchange withdrawal. This includes information about the currency being received by the user. */
            withdrawal: {
                /** @description The ticker symbol of the receiving currency. */
                symbol: string;
                /** @description The blockchain network on which the receiving currency operates. */
                network: string;
                /** @description The actual amount we sent. */
                amount: number;
                /** @description The amount we expect to sent. */
                expected_amount: number;
                /** @description Recipient's blockchain address */
                address: string;
                /** @description Additional ID for recipient's blockchain address if the receiving currency supports Memo/Destination Tag. */
                extra_id: string | null;
                /** @description The transaction hash. */
                tx_hash: string | null;
                /** @description URL of the address in the blockchain explorer. */
                address_explorer_url: string | null;
                /** @description URL of the transaction in the blockchain explorer. */
                tx_explorer_url: string | null;
            };
            /** @description Blockchain address used for refund if something goes wrong. */
            refund_address: string | null;
            /** @description Additional ID for blockchain address used for refund if the sending currency supports Memo/Destination Tag. */
            refund_extra_id: string | null;
            /**
             * Format: date-time
             * @description ISO 8601 timestamp when the exchange was created.
             */
            created_at: string;
            /**
             * Format: date-time
             * @description ISO 8601 timestamp when the fixed rate exchange will expire.
             */
            expires_at: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type SchemaRange = components['schemas']['Range'];
export type SchemaEstimate = components['schemas']['Estimate'];
export type SchemaCurrency = components['schemas']['Currency'];
export type SchemaExchange = components['schemas']['Exchange'];
export type $defs = Record<string, never>;
export interface operations {
    getExchangeRange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    route: {
                        from: {
                            /** @description The ticker symbol of the sending currency. */
                            symbol: string;
                            /** @description The blockchain network on which the sending currency operates. */
                            network: string;
                        };
                        to: {
                            /** @description The ticker symbol of the receiving currency. */
                            symbol: string;
                            /** @description The blockchain network on which the receiving currency operates. */
                            network: string;
                        };
                    };
                    /**
                     * @description Estimation direction. Reversed estimation is only available for fixed rate.
                     * @enum {string}
                     */
                    estimation: "direct" | "reversed";
                    /** @enum {string} */
                    rate: "floating" | "fixed";
                    /**
                     * @description Market name to use. Specify it when a particular provider is required, such as for jurisdiction reasons.
                     * @enum {string}
                     */
                    market?: "binance" | "kucoin" | "huobi" | "bybit" | "mexc";
                    additional_fee_percent?: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Range"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NoPair";
                            details: string;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            kind: "NotAllowed" | "NoExchangeRoute" | "RouteIsDisabled" | "MarketUnavailable";
                            details: string;
                        };
                    };
                };
            };
        };
    };
    getEstimatedExchangeAmount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    route: {
                        from: {
                            /** @description The ticker symbol of the sending currency. */
                            symbol: string;
                            /** @description The blockchain network on which the sending currency operates. */
                            network: string;
                        };
                        to: {
                            /** @description The ticker symbol of the receiving currency. */
                            symbol: string;
                            /** @description The blockchain network on which the receiving currency operates. */
                            network: string;
                        };
                    };
                    amount: number;
                    /**
                     * @description Estimation direction. Reversed estimation is only available for fixed rate.
                     * @enum {string}
                     */
                    estimation: "direct" | "reversed";
                    /** @enum {string} */
                    rate: "floating" | "fixed";
                    /**
                     * @description Market name to use. Specify it when a particular provider is required, such as for jurisdiction reasons.
                     * @enum {string}
                     */
                    market?: "binance" | "kucoin" | "huobi" | "bybit" | "mexc";
                    additional_fee_percent?: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Estimate"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "InvalidAmount";
                            details: string;
                        };
                    };
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NoPair";
                            details: string;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            kind: "NotAllowed" | "NoExchangeRoute" | "RouteIsDisabled" | "MarketUnavailable";
                            details: string;
                        };
                    };
                };
            };
        };
    };
    listCurrencies: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                network?: string;
                rate?: "floating" | "fixed";
                feature?: "custom_fee";
                market?: "binance" | "kucoin" | "huobi" | "bybit" | "mexc";
                include_available_routes?: "true" | "false";
                available_routes_direction?: "deposit" | "withdrawal";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Currency"][];
                };
            };
        };
    };
    getCurrency: {
        parameters: {
            query?: {
                include_available_routes?: "true" | "false";
                available_routes_direction?: "deposit" | "withdrawal";
            };
            header?: never;
            path: {
                symbol: string;
                network: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Currency"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NotFound";
                            details: string;
                        };
                    };
                };
            };
        };
    };
    listExchanges: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                created_before?: string;
                created_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exchange"][];
                };
            };
        };
    };
    createExchange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    route: {
                        from: {
                            /** @description The ticker symbol of the sending currency. */
                            symbol: string;
                            /** @description The blockchain network on which the sending currency operates. */
                            network: string;
                        };
                        to: {
                            /** @description The ticker symbol of the receiving currency. */
                            symbol: string;
                            /** @description The blockchain network on which the receiving currency operates. */
                            network: string;
                        };
                    };
                    amount: number;
                    /**
                     * @description Estimation direction. Reversed estimation is only available for fixed rate.
                     * @enum {string}
                     */
                    estimation: "direct" | "reversed";
                    /** @enum {string} */
                    rate: "floating" | "fixed";
                    /** @description The ID of the fixed rate to be used in the exchange. **Required when using fixed rate.** It can be obtained by calling the [Get estimated exchange amount](#tag/rates/POST/v4/rates/estimated-amount) method. */
                    rate_id?: string;
                    /** @description Recipient's blockchain address. */
                    address: string;
                    /** @description Additional ID for recipient's blockchain address if the receiving currency supports Memo/Destination Tag. */
                    extra_id?: string;
                    /** @description Blockchain address used for refund if something goes wrong. */
                    refund_address?: string;
                    /** @description Additional ID for blockchain address used for refund if the sending currency supports Memo/Destination Tag. */
                    refund_extra_id?: string;
                    /**
                     * @description Market name to use. Specify it when a particular provider is required, such as for jurisdiction reasons.
                     * @enum {string}
                     */
                    market?: "binance" | "kucoin" | "huobi" | "bybit" | "mexc";
                    additional_fee_percent?: number;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exchange"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            kind: "RateId" | "ExtraId" | "InvalidData" | "InvalidAmount" | "NoUserApiKey";
                            details: string;
                        };
                    };
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NoPair";
                            details: string;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            kind: "NotAllowed" | "NoExchangeRoute" | "RouteIsDisabled" | "MarketUnavailable";
                            details: string;
                        };
                    };
                };
            };
        };
    };
    getExchange: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exchange"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NotFound";
                            details: string;
                        };
                    };
                };
            };
        };
    };
    setTransactionHash: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    tx_hash: string;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        err: {
                            /** @enum {string} */
                            kind: "NotFound";
                            details: string;
                        };
                    };
                };
            };
        };
    };
}
